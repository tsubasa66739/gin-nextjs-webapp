// Code generated by MockGen. DO NOT EDIT.
// Source: repository/note_repository.go
//
// Generated by this command:
//
//	mockgen -source repository/note_repository.go -package repository -destination repository/note_repository_mock.go
//

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	model "github.com/tsubasa66739/gin-nextjs-webapp/repository/model"
	gomock "go.uber.org/mock/gomock"
)

// MockNoteRepository is a mock of NoteRepository interface.
type MockNoteRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNoteRepositoryMockRecorder
	isgomock struct{}
}

// MockNoteRepositoryMockRecorder is the mock recorder for MockNoteRepository.
type MockNoteRepositoryMockRecorder struct {
	mock *MockNoteRepository
}

// NewMockNoteRepository creates a new mock instance.
func NewMockNoteRepository(ctrl *gomock.Controller) *MockNoteRepository {
	mock := &MockNoteRepository{ctrl: ctrl}
	mock.recorder = &MockNoteRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNoteRepository) EXPECT() *MockNoteRepositoryMockRecorder {
	return m.recorder
}

// GetById mocks base method.
func (m *MockNoteRepository) GetById(note *model.TrnNote) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", note)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetById indicates an expected call of GetById.
func (mr *MockNoteRepositoryMockRecorder) GetById(note any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockNoteRepository)(nil).GetById), note)
}

// Insert mocks base method.
func (m *MockNoteRepository) Insert(note *model.TrnNote) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", note)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockNoteRepositoryMockRecorder) Insert(note any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockNoteRepository)(nil).Insert), note)
}

// InsertHst mocks base method.
func (m *MockNoteRepository) InsertHst(note model.TrnNote) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertHst", note)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertHst indicates an expected call of InsertHst.
func (mr *MockNoteRepositoryMockRecorder) InsertHst(note any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertHst", reflect.TypeOf((*MockNoteRepository)(nil).InsertHst), note)
}

// ListBy mocks base method.
func (m *MockNoteRepository) ListBy(notes *[]model.TrnNote) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBy", notes)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBy indicates an expected call of ListBy.
func (mr *MockNoteRepositoryMockRecorder) ListBy(notes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBy", reflect.TypeOf((*MockNoteRepository)(nil).ListBy), notes)
}

// Update mocks base method.
func (m *MockNoteRepository) Update(note *model.TrnNote) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", note)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockNoteRepositoryMockRecorder) Update(note any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNoteRepository)(nil).Update), note)
}
